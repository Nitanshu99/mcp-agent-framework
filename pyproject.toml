[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "mcp-agent-framework"
version = "0.1.0"
description = "A basic Agent with Model Context Protocol (MCP) capabilities for bioinformatics tool discovery"
readme = "README.md"
license = "MIT"
requires-python = ">=3.12"
authors = [
    { name = "Fernando Delgado Chaves" },
    { name = "Piyush Kulkarni" },
    { name = "Gautam Chug" },
    { name = "Nitanshu Mayur Idnani" },
    { name = "Reeju Bhattacharjee" },
]
maintainers = [
    { name = "Fernando Delgado Chaves" },
    { name = "Piyush Kulkarni" },
    { name = "Gautam Chug" },
    { name = "Nitanshu Mayur Idnani" },
    { name = "Reeju Bhattacharjee" }
]
keywords = [
    "ai",
    "llm",
    "mcp",
    "langchain",
    "langgraph",
    "bioinformatics",
    "semantic-search",
    "multi-agent",
]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Science/Research",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Scientific/Engineering :: Bio-Informatics",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
]

dependencies = [
    # Core LLM and Agent Framework
    "langchain>=0.3.0",
    "langchain-core>=0.3.0", 
    "langgraph>=0.2.0",
    "langchain-community>=0.3.0",
    
    # MCP Integration
    "langchain-mcp-adapters>=0.1.0",
    "mcp>=1.0.0",
    
    # Google Gemini Integration
    "langchain-google-genai>=2.0.0",
    "google-generativeai>=0.8.0",
    
    # Vector Database
    "chromadb>=0.5.0",
    "sentence-transformers>=3.0.0",
    
    # Data Processing and Validation
    "pydantic>=2.8.0",
    "pydantic-settings>=2.4.0",
    "numpy>=1.26.0",
    "pandas>=2.2.0",
    
    # HTTP and API clients
    "httpx>=0.27.0",
    "aiohttp>=3.10.0",
    "requests>=2.32.0",
    
    # Configuration and Environment
    "python-dotenv>=1.0.0",
    "pyyaml>=6.0.0",
    "click>=8.1.0",
    
    # Logging and Monitoring
    "structlog>=24.0.0",
    "rich>=13.7.0",
    
    # Async utilities
    "asyncio-mqtt>=0.16.0",
    "aiofiles>=24.0.0",
    
    # Text processing
    "tiktoken>=0.7.0",
    "beautifulsoup4>=4.12.0",
    "lxml>=5.2.0",
    
    # Search and Web capabilities
    "tavily-python>=0.3.0",
    "duckduckgo-search>=6.0.0",
    
    # Audio processing (for TTS features)
    "pydub>=0.25.0",
    "librosa>=0.10.0",
]

[project.optional-dependencies]
# Development dependencies
dev = [
    # Type checking
    "mypy>=1.11.0",
    "types-requests>=2.32.0",
    "types-pyyaml>=6.0.0",
    
    # Testing
    "pytest>=8.3.0",
    "pytest-asyncio>=0.23.0",
    "pytest-cov>=5.0.0",
    "pytest-mock>=3.14.0",
    "pytest-xdist>=3.6.0",
    "pytest-timeout>=2.3.0",
    "httpx-test>=0.2.0",
    
    # Code quality
    "ruff>=0.5.0",
    "black>=24.8.0",
    "isort>=5.13.0",
    "bandit>=1.7.0",
    "safety>=3.2.0",
    
    # Pre-commit hooks
    "pre-commit>=3.8.0",
    
    # Documentation
    "sphinx>=7.4.0",
    "sphinx-autodoc-typehints>=2.2.0",
    "sphinx-rtd-theme>=2.0.0",
    "myst-parser>=3.0.0",
    
    # Jupyter for development
    "jupyter>=1.0.0",
    "ipykernel>=6.29.0",
    "nbformat>=5.10.0",
]

# Production dependencies with performance optimizations
prod = [
    "uvloop>=0.20.0; sys_platform != 'win32'",
    "gunicorn>=23.0.0",
    "prometheus-client>=0.20.0",
]

# All optional dependencies
all = [
    "mcp-agent-framework[dev,prod]"
]

[project.urls]
Homepage = "https://github.com/your-org/mcp-agent-framework"
Documentation = "https://mcp-agent-framework.readthedocs.io/"
Repository = "https://github.com/your-org/mcp-agent-framework.git"
Issues = "https://github.com/your-org/mcp-agent-framework/issues"
Changelog = "https://github.com/your-org/mcp-agent-framework/blob/main/CHANGELOG.md"

[project.scripts]
mcp-agent = "mcp_agent.main:cli"
bioflow-search = "mcp_agent.main:search_cli"
bioflow-setup = "mcp_agent.scripts.setup:main"

[tool.hatch.version]
path = "src/mcp_agent/__init__.py"

[tool.hatch.build.targets.sdist]
include = [
    "/src",
    "/tests",
    "/docs",
    "/scripts",
    "/examples",
]

[tool.hatch.build.targets.wheel]
packages = ["src/mcp_agent"]

# MyPy Configuration
[tool.mypy]
python_version = "3.12"
strict = true
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
extra_checks = true

[[tool.mypy.overrides]]
module = [
    "chromadb.*",
    "tavily.*",
    "mcp.*",
    "langchain_mcp_adapters.*",
]
ignore_missing_imports = true

# Ruff Configuration
[tool.ruff]
target-version = "py312"
line-length = 88
indent-width = 4

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
    "ARG", # flake8-unused-arguments
    "SIM", # flake8-simplify
    "TCH", # flake8-type-checking
    "PTH", # flake8-use-pathlib
    "ERA", # eradicate
    "PL",  # pylint
    "RUF", # ruff-specific rules
]
ignore = [
    "E501",  # line too long (handled by black)
    "B008",  # function calls in argument defaults
    "PLR0913", # too many arguments
    "PLR0915", # too many statements
]

[tool.ruff.lint.per-file-ignores]
"tests/**/*.py" = ["ARG", "PLR2004"]
"scripts/**/*.py" = ["T201"]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

# Black Configuration
[tool.black]
line-length = 88
target-version = ['py312']
include = '\.pyi?$'

# isort Configuration  
[tool.isort]
profile = "black"
line_length = 88
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
src_paths = ["src", "tests"]

# Pytest Configuration
[tool.pytest.ini_options]
minversion = "8.0"
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov=src/mcp_agent",
    "--cov-report=term-missing",
    "--cov-report=html:htmlcov",
    "--cov-report=xml",
    "--cov-fail-under=90",
    "--asyncio-mode=auto",
    "-ra",
]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "mcp: marks tests related to MCP functionality",
    "llm: marks tests that require LLM API calls",
]
filterwarnings = [
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
]
timeout = 300

# Coverage Configuration
[tool.coverage.run]
source = ["src"]
branch = true
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__init__.py",
    "*/conftest.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
show_missing = true
precision = 2

# Bandit Security Configuration
[tool.bandit]
exclude_dirs = ["tests", "docs"]
skips = ["B101", "B601"]

# Documentation Configuration
[tool.sphinx]
source-dir = "docs"
build-dir = "docs/_build"