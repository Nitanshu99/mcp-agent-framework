"""Sphinx configuration file for MCP Agent Framework documentation."""

import os
import sys
from datetime import datetime
from pathlib import Path

# -- Path setup --------------------------------------------------------------

# If extensions (or modules to document with autodoc) are in another directory,
# add these directories to sys.path here. If the directory is relative to the
# documentation root, use os.path.abspath to make it absolute.

docs_dir = Path(__file__).parent
project_root = docs_dir.parent
src_dir = project_root / "src"

sys.path.insert(0, str(src_dir))
sys.path.insert(0, str(project_root))

# -- Project information -----------------------------------------------------

project = "MCP Agent Framework"
copyright = f"{datetime.now().year}, Fernando Delgado Chaves, Piyush Kulkarni"
author = "Fernando Delgado Chaves, Piyush Kulkarni"

# The short X.Y version
version = "0.1"
# The full version, including alpha/beta/rc tags
release = "0.1.0"

# -- General configuration ---------------------------------------------------

# Add any Sphinx extension module names here, as strings. They can be
# extensions coming with Sphinx (named 'sphinx.ext.*') or your custom
# ones.
extensions = [
    # Core Sphinx extensions
    "sphinx.ext.autodoc",
    "sphinx.ext.autosummary",
    "sphinx.ext.doctest",
    "sphinx.ext.intersphinx",
    "sphinx.ext.todo",
    "sphinx.ext.coverage",
    "sphinx.ext.mathjax",
    "sphinx.ext.ifconfig",
    "sphinx.ext.viewcode",
    "sphinx.ext.githubpages",
    "sphinx.ext.napoleon",
    
    # Third-party extensions
    "sphinx_autodoc_typehints",
    "myst_parser",
    
    # Custom extensions for better documentation
    "sphinx.ext.graphviz",
    "sphinx.ext.inheritance_diagram",
]

# Add any paths that contain templates here, relative to this directory.
templates_path = ["_templates"]

# List of patterns, relative to source directory, that match files and
# directories to ignore when looking for source files.
exclude_patterns = [
    "_build",
    "Thumbs.db",
    ".DS_Store",
    "**.ipynb_checkpoints",
    "build",
]

# The suffix(es) of source filenames.
source_suffix = {
    ".rst": None,
    ".md": "myst_parser",
}

# The master toctree document.
master_doc = "index"

# The language for content autogenerated by Sphinx. Refer to documentation
# for a list of supported languages.
language = "en"

# -- Options for HTML output -------------------------------------------------

# The theme to use for HTML and HTML Help pages.
html_theme = "sphinx_rtd_theme"

# Theme options are theme-specific and customize the look and feel of a theme
# further.
html_theme_options = {
    "collapse_navigation": False,
    "sticky_navigation": True,
    "navigation_depth": 4,
    "includehidden": True,
    "titles_only": False,
    "logo_only": False,
    "display_version": True,
    "prev_next_buttons_location": "bottom",
    "style_external_links": False,
    "vcs_pageview_mode": "",
    "style_nav_header_background": "#2980B9",
}

# Add any paths that contain custom static files (such as style sheets) here,
# relative to this directory. They are copied after the builtin static files,
# so a file named "default.css" will overwrite the builtin "default.css".
html_static_path = ["_static"]

# Custom sidebar templates, must be a dictionary that maps document names
# to template names.
html_sidebars = {
    "**": [
        "relations.html",  # needs 'show_related': True theme option to display
        "searchbox.html",
    ]
}

# The name of the Pygments (syntax highlighting) style to use.
pygments_style = "sphinx"

# If true, `todo` and `todoList` produce output, else they produce nothing.
todo_include_todos = True

# -- Options for autodoc ----------------------------------------------------

# This value selects what content will be inserted into the main body of an
# autoclass directive.
autoclass_content = "both"

# This value selects if automatically documented members are sorted 
# alphabetical (value 'alphabetical'), by member type (value 'groupwise') 
# or by source order (value 'bysource').
autodoc_member_order = "bysource"

# If true, the current module name will be prepended to all description
# unit titles (such as .. function::).
add_module_names = False

# If true, autosummary will generate stub pages for each entry listed in 
# an autosummary directive.
autosummary_generate = True

# The default options for autodoc directives.
autodoc_default_options = {
    "members": True,
    "member-order": "bysource",
    "special-members": "__init__",
    "undoc-members": True,
    "exclude-members": "__weakref__",
    "show-inheritance": True,
}

# -- Options for napoleon extension ------------------------------------------

# Enable parsing of NumPy style docstrings
napoleon_numpy_docstring = True

# Enable parsing of Google style docstrings
napoleon_google_docstring = True

# Include init docstrings
napoleon_include_init_with_doc = False

# Include special members
napoleon_include_special_with_doc = True

# Use admonition for Examples section
napoleon_use_admonition_for_examples = True

# Use admonition for Notes section
napoleon_use_admonition_for_notes = True

# Use admonition for References section
napoleon_use_admonition_for_references = True

# Use inline code for variables
napoleon_use_ivar = False

# Use parameters section
napoleon_use_param = True

# Use keyword section
napoleon_use_keyword = True

# Use returns section
napoleon_use_rtype = False

# -- Options for intersphinx extension ---------------------------------------

# Links to other documentation
intersphinx_mapping = {
    "python": ("https://docs.python.org/3", None),
    "numpy": ("https://numpy.org/doc/stable/", None),
    "pandas": ("https://pandas.pydata.org/pandas-docs/stable/", None),
    "langchain": ("https://python.langchain.com/docs/", None),
    "pydantic": ("https://docs.pydantic.dev/latest/", None),
    "chromadb": ("https://docs.trychroma.com/", None),
}

# -- Options for sphinx_autodoc_typehints -----------------------------------

# Always use short form for type hints
typehints_fully_qualified = False

# Include return type hints in function signatures
typehints_use_rtype = False

# Include parameter type hints in function signatures
typehints_use_signature = True

# Include return type hints in descriptions
typehints_use_signature_return = False

# -- Options for MyST parser ------------------------------------------------

# Enable additional MyST syntax features
myst_enable_extensions = [
    "amsmath",
    "colon_fence",
    "deflist",
    "dollarmath",
    "fieldlist",
    "html_admonition",
    "html_image",
    "linkify",
    "replacements",
    "smartquotes",
    "strikethrough",
    "substitution",
    "tasklist",
]

# -- Options for HTML output -------------------------------------------------

# The name for this set of Sphinx documents.
html_title = f"{project} v{release}"

# A shorter title for the navigation bar.
html_short_title = "MCP Agent"

# The name of an image file (relative to this directory) to place at the top
# of the sidebar.
# html_logo = "_static/logo.png"

# The name of an image file (within the static path) to use as favicon of the
# docs.
# html_favicon = "_static/favicon.ico"

# Add any paths that contain custom static files (such as style sheets) here,
# relative to this directory. They are copied after the builtin static files,
# so a file named "default.css" will overwrite the builtin "default.css".
html_static_path = ["_static"]

# If not '', a 'Last updated on:' timestamp is inserted at every page bottom,
# using the given strftime format.
html_last_updated_fmt = "%b %d, %Y"

# If true, SmartyPants will be used to convert quotes and dashes to
# typographically correct entities.
html_use_smartypants = True

# Custom CSS files
html_css_files = [
    "custom.css",
]

# -- Options for LaTeX output ------------------------------------------------

latex_elements = {
    # The paper size ('letterpaper' or 'a4paper').
    "papersize": "letterpaper",
    
    # The font size ('10pt', '11pt' or '12pt').
    "pointsize": "10pt",
    
    # Additional stuff for the LaTeX preamble.
    "preamble": "",
    
    # Latex figure (float) alignment
    "figure_align": "htbp",
}

# Grouping the document tree into LaTeX files. List of tuples
# (source start file, target name, title,
#  author, documentclass [howto, manual, or own class]).
latex_documents = [
    (
        master_doc,
        "MCPAgentFramework.tex",
        "MCP Agent Framework Documentation",
        "Fernando Delgado Chaves, Piyush Kulkarni",
        "manual",
    ),
]

# -- Options for manual page output ------------------------------------------

# One entry per manual page. List of tuples
# (source start file, name, description, authors, manual section).
man_pages = [
    (
        master_doc,
        "mcpagentframework",
        "MCP Agent Framework Documentation",
        [author],
        1,
    )
]

# -- Options for Texinfo output ----------------------------------------------

# Grouping the document tree into Texinfo files. List of tuples
# (source start file, target name, title, author,
#  dir menu entry, description, category)
texinfo_documents = [
    (
        master_doc,
        "MCPAgentFramework",
        "MCP Agent Framework Documentation",
        author,
        "MCPAgentFramework",
        "A basic Agent with Model Context Protocol (MCP) capabilities.",
        "Miscellaneous",
    ),
]

# -- Options for Epub output -------------------------------------------------

# Bibliographic Dublin Core info.
epub_title = project
epub_author = author
epub_publisher = author
epub_copyright = copyright

# A list of files that should not be packed into the epub file.
epub_exclude_files = ["search.html"]

# -- Extension configuration -------------------------------------------------

# -- Options for todo extension ----------------------------------------------

# If true, `todo` and `todoList` produce output, else they produce nothing.
todo_include_todos = True

# -- Custom setup function ---------------------------------------------------

def setup(app):
    """Custom Sphinx setup function."""
    # Add custom CSS
    app.add_css_file("custom.css")
    
    # Custom roles for better documentation
    app.add_crossref_type(
        directivename="confval",
        rolename="confval",
        indextemplate="pair: %s; configuration value",
    )